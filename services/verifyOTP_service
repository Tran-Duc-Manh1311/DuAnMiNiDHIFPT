package services

import (
	"MiniHIFPT/database"
	"MiniHIFPT/models"
	"errors"
	"github.com/gofiber/fiber/v2"
	"regexp"
	"time"
)

func VerifyOTPService(soDienThoai, otpCode string, c *fiber.Ctx) (string, error) {
	// Validate input
	if err := validateOTPRequest(soDienThoai, otpCode); err != nil {
		return "", err
	}

	// Validate OTP
	otp, err := validateOTP(soDienThoai, otpCode)
	if err != nil {
		return "", err
	}

	// Mark OTP as verified
	if err := markOTPAsVerified(otp); err != nil {
		return "", err
	}

	// Check if the account exists
	account, err := database.GetAccountByPhone(soDienThoai)
	if err != nil || account == nil {
		return "", errors.New("Tài khoản không tồn tại.")
	}

	// Check device and handle device verification
	device, err := checkDeviceStatus(soDienThoai, c)
	if err != nil {
		return "", err
	}

	// If OTP and device are verified, generate token
	if device.XacThucOTP {
		return generateJWT(account)
	}

	return "", errors.New("Không xác thực được thiết bị.")
}

func validateOTPRequest(soDienThoai, otpCode string) error {
	if soDienThoai == "" || otpCode == "" {
		return errors.New("Số điện thoại và mật khẩu không được để trống")
	}

	// Validate phone number format
	phoneRegex := "^\\d{10,15}$"
	matched, err := regexp.MatchString(phoneRegex, soDienThoai)
	if err != nil || !matched {
		return errors.New("Số điện thoại không hợp lệ. Chỉ được chứa số và phải từ 10 đến 15 ký tự.")
	}

	return nil
}

func validateOTP(soDienThoai, otpCode string) (*models.OTP, error) {
	otp, err := database.GetOTPByPhoneAndCode(soDienThoai, otpCode)
	if err != nil || otp == nil || time.Now().After(otp.HetHan) || otp.DaXacThuc {
		return nil, errors.New("Mã OTP hoặc số điện thoại không hợp lệ.")
	}
	return otp, nil
}

func markOTPAsVerified(otp *models.OTP) error {
	otp.DaXacThuc = true
	return database.SaveOTP(otp)
}

func checkDeviceStatus(soDienThoai string, c *fiber.Ctx) (*models.Devices, error) {
	deviceType := c.Get("User-Agent")
	device, err := database.GetDeviceByPhoneAndType(soDienThoai, deviceType)
	if err != nil {
		return nil, errors.New("Có lỗi xảy ra khi kiểm tra thông tin thiết bị")
	}

	if device == nil {
		device = &models.Devices{
			SoDienThoai: soDienThoai,
			DeviceType:  deviceType,
			XacThucOTP:  true,
		}
		if err := database.CreateDevice(device); err != nil {
			return nil, errors.New("Có lỗi xảy ra khi tạo thiết bị")
		}
	} else {
		device.XacThucOTP = true
		if err := database.UpdateDevice(device); err != nil {
			return nil, errors.New("Có lỗi xảy ra khi cập nhật thiết bị")
		}
	}
	return device, nil
}

func generateJWT(account *models.Account) (string, error) {
	// Generate JWT token logic
	// This is just a placeholder; actual implementation would be based on your JWT generation setup.
	return "token", nil
}
